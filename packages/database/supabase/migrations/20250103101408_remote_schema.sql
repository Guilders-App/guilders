create type "public"."document_entity_type" as enum ('account', 'transaction');

create table "public"."document" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "path" text not null,
    "size" bigint not null,
    "type" text not null,
    "entity_type" document_entity_type not null,
    "entity_id" bigint not null,
    "user_id" uuid not null,
    "created_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."document" enable row level security;

alter table "public"."transaction" add column "created_at" timestamp with time zone not null default timezone('utc'::text, now());

alter table "public"."transaction" add column "updated_at" timestamp with time zone not null default timezone('utc'::text, now());

CREATE INDEX document_entity_idx ON public.document USING btree (entity_type, entity_id);

CREATE UNIQUE INDEX document_path_key ON public.document USING btree (path);

CREATE UNIQUE INDEX document_pkey ON public.document USING btree (id);

CREATE INDEX document_user_id_idx ON public.document USING btree (user_id);

alter table "public"."document" add constraint "document_pkey" PRIMARY KEY using index "document_pkey";

alter table "public"."document" add constraint "document_path_key" UNIQUE using index "document_path_key";

alter table "public"."document" add constraint "document_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."document" validate constraint "document_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_document_entity()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  IF (NEW.entity_type = 'account') THEN
    IF NOT EXISTS (SELECT 1 FROM account WHERE id = NEW.entity_id AND user_id = NEW.user_id) THEN
      RAISE EXCEPTION 'Invalid entity_id for account type';
    END IF;
  ELSIF (NEW.entity_type = 'transaction') THEN
    IF NOT EXISTS (SELECT 1 FROM transaction t JOIN account a ON t.account_id = a.id WHERE t.id = NEW.entity_id AND a.user_id = NEW.user_id) THEN
      RAISE EXCEPTION 'Invalid entity_id for transaction type';
    END IF;
  END IF;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.trigger_set_timestamp()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.updated_at = NOW();  -- Set the updated_at field to the current timestamp
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."document" to "anon";

grant insert on table "public"."document" to "anon";

grant references on table "public"."document" to "anon";

grant select on table "public"."document" to "anon";

grant trigger on table "public"."document" to "anon";

grant truncate on table "public"."document" to "anon";

grant update on table "public"."document" to "anon";

grant delete on table "public"."document" to "authenticated";

grant insert on table "public"."document" to "authenticated";

grant references on table "public"."document" to "authenticated";

grant select on table "public"."document" to "authenticated";

grant trigger on table "public"."document" to "authenticated";

grant truncate on table "public"."document" to "authenticated";

grant update on table "public"."document" to "authenticated";

grant delete on table "public"."document" to "service_role";

grant insert on table "public"."document" to "service_role";

grant references on table "public"."document" to "service_role";

grant select on table "public"."document" to "service_role";

grant trigger on table "public"."document" to "service_role";

grant truncate on table "public"."document" to "service_role";

grant update on table "public"."document" to "service_role";

create policy "Permit user all based on user id"
on "public"."document"
as permissive
for all
to public
using ((check_mfa() AND (auth.uid() = user_id)))
with check ((check_mfa() AND (auth.uid() = user_id)));


CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.account FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.document FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER validate_document_entity BEFORE INSERT OR UPDATE ON public.document FOR EACH ROW EXECUTE FUNCTION check_document_entity();

CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.transaction FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();


