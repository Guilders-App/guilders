revoke delete on table "public"."document" from "anon";

revoke insert on table "public"."document" from "anon";

revoke references on table "public"."document" from "anon";

revoke select on table "public"."document" from "anon";

revoke trigger on table "public"."document" from "anon";

revoke truncate on table "public"."document" from "anon";

revoke update on table "public"."document" from "anon";

revoke delete on table "public"."document" from "authenticated";

revoke insert on table "public"."document" from "authenticated";

revoke references on table "public"."document" from "authenticated";

revoke select on table "public"."document" from "authenticated";

revoke trigger on table "public"."document" from "authenticated";

revoke truncate on table "public"."document" from "authenticated";

revoke update on table "public"."document" from "authenticated";

revoke delete on table "public"."document" from "service_role";

revoke insert on table "public"."document" from "service_role";

revoke references on table "public"."document" from "service_role";

revoke select on table "public"."document" from "service_role";

revoke trigger on table "public"."document" from "service_role";

revoke truncate on table "public"."document" from "service_role";

revoke update on table "public"."document" from "service_role";

alter table "public"."document" drop constraint "document_account_id_fkey";

alter table "public"."document" drop constraint "document_pkey";

drop index if exists "public"."document_pkey";

drop table "public"."document";

create table "public"."transaction" (
    "id" bigint generated by default as identity not null,
    "date" timestamp with time zone not null,
    "amount" double precision not null,
    "currency" text not null,
    "description" text not null,
    "category" text,
    "account_id" bigint,
    "provider_transaction_id" text
);


alter table "public"."transaction" enable row level security;

alter table "public"."account" enable row level security;

alter table "public"."currency" enable row level security;

alter table "public"."institution" enable row level security;

alter table "public"."institution_connection" enable row level security;

alter table "public"."provider" enable row level security;

alter table "public"."provider_connection" enable row level security;

CREATE UNIQUE INDEX transaction_pkey ON public.transaction USING btree (id);

alter table "public"."transaction" add constraint "transaction_pkey" PRIMARY KEY using index "transaction_pkey";

alter table "public"."transaction" add constraint "transaction_account_id_fkey" FOREIGN KEY (account_id) REFERENCES account(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."transaction" validate constraint "transaction_account_id_fkey";

alter table "public"."transaction" add constraint "transaction_currency_fkey" FOREIGN KEY (currency) REFERENCES currency(code) not valid;

alter table "public"."transaction" validate constraint "transaction_currency_fkey";

grant delete on table "public"."transaction" to "anon";

grant insert on table "public"."transaction" to "anon";

grant references on table "public"."transaction" to "anon";

grant select on table "public"."transaction" to "anon";

grant trigger on table "public"."transaction" to "anon";

grant truncate on table "public"."transaction" to "anon";

grant update on table "public"."transaction" to "anon";

grant delete on table "public"."transaction" to "authenticated";

grant insert on table "public"."transaction" to "authenticated";

grant references on table "public"."transaction" to "authenticated";

grant select on table "public"."transaction" to "authenticated";

grant trigger on table "public"."transaction" to "authenticated";

grant truncate on table "public"."transaction" to "authenticated";

grant update on table "public"."transaction" to "authenticated";

grant delete on table "public"."transaction" to "service_role";

grant insert on table "public"."transaction" to "service_role";

grant references on table "public"."transaction" to "service_role";

grant select on table "public"."transaction" to "service_role";

grant trigger on table "public"."transaction" to "service_role";

grant truncate on table "public"."transaction" to "service_role";

grant update on table "public"."transaction" to "service_role";

create policy "Enable users based on user_id"
on "public"."account"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."currency"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."institution"
as permissive
for select
to public
using (true);


create policy "Policy with table joins"
on "public"."institution_connection"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) IN ( SELECT provider_connection.user_id
   FROM provider_connection
  WHERE (institution_connection.provider_connection_id = provider_connection.id))))
with check ((( SELECT auth.uid() AS uid) IN ( SELECT provider_connection.user_id
   FROM provider_connection
  WHERE (institution_connection.provider_connection_id = provider_connection.id))));


create policy "Enable read access for all users"
on "public"."provider"
as permissive
for select
to public
using (true);


create policy "Enable for users based on user_id"
on "public"."provider_connection"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));



