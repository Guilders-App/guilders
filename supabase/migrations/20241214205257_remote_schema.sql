create table "public"."subscription" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "stripe_customer_id" text,
    "status" subscription_status,
    "cancel_at_period_end" boolean,
    "current_period_start" timestamp with time zone not null default now(),
    "current_period_end" timestamp with time zone not null default now(),
    "ended_at" timestamp with time zone default now(),
    "cancel_at" timestamp with time zone default now(),
    "canceled_at" timestamp with time zone default now(),
    "trial_start" timestamp with time zone default now(),
    "trial_end" timestamp with time zone default now()
);


alter table "public"."subscription" enable row level security;

CREATE UNIQUE INDEX subscription_pkey ON public.subscription USING btree (id);

alter table "public"."subscription" add constraint "subscription_pkey" PRIMARY KEY using index "subscription_pkey";

alter table "public"."subscription" add constraint "subscription_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."subscription" validate constraint "subscription_user_id_fkey";

grant delete on table "public"."subscription" to "anon";

grant insert on table "public"."subscription" to "anon";

grant references on table "public"."subscription" to "anon";

grant select on table "public"."subscription" to "anon";

grant trigger on table "public"."subscription" to "anon";

grant truncate on table "public"."subscription" to "anon";

grant update on table "public"."subscription" to "anon";

grant delete on table "public"."subscription" to "authenticated";

grant insert on table "public"."subscription" to "authenticated";

grant references on table "public"."subscription" to "authenticated";

grant select on table "public"."subscription" to "authenticated";

grant trigger on table "public"."subscription" to "authenticated";

grant truncate on table "public"."subscription" to "authenticated";

grant update on table "public"."subscription" to "authenticated";

grant delete on table "public"."subscription" to "service_role";

grant insert on table "public"."subscription" to "service_role";

grant references on table "public"."subscription" to "service_role";

grant select on table "public"."subscription" to "service_role";

grant trigger on table "public"."subscription" to "service_role";

grant truncate on table "public"."subscription" to "service_role";

grant update on table "public"."subscription" to "service_role";

create policy "Enable users to view their own data only"
on "public"."subscription"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



