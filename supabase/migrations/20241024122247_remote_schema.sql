

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."account_subtype" AS ENUM (
    'depository',
    'brokerage',
    'crypto',
    'property',
    'vehicle',
    'creditcard',
    'loan'
);


ALTER TYPE "public"."account_subtype" OWNER TO "postgres";


CREATE TYPE "public"."account_type" AS ENUM (
    'asset',
    'liability'
);


ALTER TYPE "public"."account_type" OWNER TO "postgres";


CREATE TYPE "public"."aggregator" AS ENUM (
    'Plaid',
    'SnapTrade'
);


ALTER TYPE "public"."aggregator" OWNER TO "postgres";


CREATE TYPE "public"."investable" AS ENUM (
    'non_investable',
    'investable_easy_convert',
    'investable_cash'
);


ALTER TYPE "public"."investable" OWNER TO "postgres";


CREATE TYPE "public"."taxability" AS ENUM (
    'taxable',
    'tax_free',
    'tax_deferred'
);


ALTER TYPE "public"."taxability" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."log_account_update"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    NEW.updated_at := now();

    INSERT INTO public.account_history (account_id, updated_at, type, subtype, description, user_id, name, taxability, value, currency, investable, notes, parent, connection, cost, quantity, tax_rate, ticker)
    VALUES (NEW.id, now(), NEW.type, NEW.subtype, NEW.description, NEW.user_id, NEW.name, NEW.taxability, NEW.value, NEW.currency, NEW.investable, NEW.notes, NEW.parent, NEW.connection, NEW.cost, NEW.quantity, NEW.tax_rate, NEW.ticker);
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."log_account_update"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."account" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "type" "public"."account_type" NOT NULL,
    "subtype" "public"."account_subtype" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "name" character varying NOT NULL,
    "taxability" "public"."taxability" DEFAULT 'tax_free'::"public"."taxability" NOT NULL,
    "value" bigint NOT NULL,
    "currency" character varying NOT NULL,
    "investable" "public"."investable" DEFAULT 'investable_cash'::"public"."investable" NOT NULL,
    "notes" "text" DEFAULT '''''::text'::"text" NOT NULL,
    "parent" bigint,
    "connection" bigint,
    "cost" bigint,
    "quantity" double precision,
    "tax_rate" smallint DEFAULT '0'::smallint,
    "ticker" character varying,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."account" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."account_history" (
    "id" bigint NOT NULL,
    "account_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone NOT NULL,
    "type" "public"."account_type" NOT NULL,
    "subtype" "public"."account_subtype" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "taxability" "public"."taxability" DEFAULT 'tax_free'::"public"."taxability" NOT NULL,
    "value" bigint NOT NULL,
    "currency" "text" NOT NULL,
    "investable" "public"."investable" DEFAULT 'investable_cash'::"public"."investable" NOT NULL,
    "notes" "text" DEFAULT '''''::text'::"text" NOT NULL,
    "parent" bigint,
    "connection" bigint,
    "cost" bigint,
    "quantity" double precision,
    "tax_rate" smallint DEFAULT '0'::smallint,
    "ticker" "text"
);


ALTER TABLE "public"."account_history" OWNER TO "postgres";


ALTER TABLE "public"."account_history" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."account_history_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."account" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."account_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."connection" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "account_id" bigint NOT NULL,
    "aggregator" "public"."aggregator" NOT NULL,
    "last_updated" timestamp without time zone DEFAULT "now"() NOT NULL,
    "provider" character varying
);


ALTER TABLE "public"."connection" OWNER TO "postgres";


ALTER TABLE "public"."connection" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."connection_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."document" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "size" bigint NOT NULL,
    "account_id" bigint NOT NULL
);


ALTER TABLE "public"."document" OWNER TO "postgres";


ALTER TABLE "public"."document" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."document_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."account_history"
    ADD CONSTRAINT "account_history_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."account"
    ADD CONSTRAINT "account_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."connection"
    ADD CONSTRAINT "connection_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."document"
    ADD CONSTRAINT "document_pkey" PRIMARY KEY ("id");



CREATE OR REPLACE TRIGGER "account_update_trigger" AFTER INSERT OR UPDATE ON "public"."account" FOR EACH ROW EXECUTE FUNCTION "public"."log_account_update"();



ALTER TABLE ONLY "public"."account"
    ADD CONSTRAINT "account_connection_fkey" FOREIGN KEY ("connection") REFERENCES "public"."connection"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."account_history"
    ADD CONSTRAINT "account_history_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."account"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."account"
    ADD CONSTRAINT "account_parent_fkey" FOREIGN KEY ("parent") REFERENCES "public"."account"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."account"
    ADD CONSTRAINT "account_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."connection"
    ADD CONSTRAINT "connection_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."account"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."document"
    ADD CONSTRAINT "document_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."account"("id") ON UPDATE CASCADE ON DELETE CASCADE;





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."log_account_update"() TO "anon";
GRANT ALL ON FUNCTION "public"."log_account_update"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."log_account_update"() TO "service_role";


















GRANT ALL ON TABLE "public"."account" TO "anon";
GRANT ALL ON TABLE "public"."account" TO "authenticated";
GRANT ALL ON TABLE "public"."account" TO "service_role";



GRANT ALL ON TABLE "public"."account_history" TO "anon";
GRANT ALL ON TABLE "public"."account_history" TO "authenticated";
GRANT ALL ON TABLE "public"."account_history" TO "service_role";



GRANT ALL ON SEQUENCE "public"."account_history_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."account_history_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."account_history_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."account_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."account_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."account_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."connection" TO "anon";
GRANT ALL ON TABLE "public"."connection" TO "authenticated";
GRANT ALL ON TABLE "public"."connection" TO "service_role";



GRANT ALL ON SEQUENCE "public"."connection_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."connection_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."connection_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."document" TO "anon";
GRANT ALL ON TABLE "public"."document" TO "authenticated";
GRANT ALL ON TABLE "public"."document" TO "service_role";



GRANT ALL ON SEQUENCE "public"."document_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."document_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."document_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
